pipeline {
    agent any

    parameters {
        choice(name: 'TERRAFORM_ACTION', choices: ['init', 'plan', 'apply', 'destroy'], description: 'Select Terraform action')
    }

    environment {
        AWS_REGION = 'us-east-1'
        TF_WORKING_DIR = 'ec2'
    }

            stages {
                // stage('Checkout') {
                //     steps {
                //         git branch: 'main', url: 'https://github.com/your-repo.git'
                //     }
                // }
        
        stage('Terraform Init & Plan') {
            when {
                expression { params.TERRAFORM_ACTION == 'plan' || params.TERRAFORM_ACTION == 'apply' }
            }
            steps {
                dir("${TF_WORKING_DIR}") {
                    sh 'terraform init'
                    sh 'terraform plan -out=tfplan'
                }
            }
        }
        
        stage('Terraform Apply') {
            when {
                expression { params.TERRAFORM_ACTION == 'apply' }
            }
            steps {
                dir("${TF_WORKING_DIR}") {
                    script {
                        if (fileExists("tfplan")) {
                            echo "Updating existing Terraform plan before applying..."
                            sh 'terraform plan -out=tfplan'
                        } else {
                            error "Terraform plan file does not exist. Run the 'plan' stage first."
                        }
                    }
                    sh 'terraform apply -auto-approve tfplan'
                }
            }
        }

        stage('Terraform Destroy') {
            when {
                expression { params.TERRAFORM_ACTION == 'destroy' }
            }
            steps {
                dir("${TF_WORKING_DIR}") {
                    sh 'terraform destroy -auto-approve'
                }
            }
        }
    }

    post {
        always {
            echo 'Terraform process completed!'
        }
    }
}

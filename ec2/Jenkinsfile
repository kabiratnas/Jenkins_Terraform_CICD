pipeline {
    agent any

    parameters {
        choice(name: 'TAG_NAME', choices: ['Server_dev', 'Server_test', 'Server_prod'], description: 'Select the Tag Name for the EC2 instance')
        choice(name: 'TERRAFORM_ACTION', choices: ['init & plan', 'apply', 'destroy'], description: 'Select Terraform action')
        string(name: 'INSTANCE_COUNT', defaultValue: '1', description: 'Number of EC2 instances to create')
    }

    environment {
        AWS_REGION = 'us-east-1'
        TF_WORKING_DIR = 'ec2'
        TF_VAR_tag_name = "${params.TAG_NAME}"
    }

    stages {
        // stage('Checkout') {
        //     steps {
        //         git branch: 'main', url: 'https://github.com/your-repo.git'
        //     }
        // }

        stage('Terraform Init & Plan') {
            when {
                expression { params.TERRAFORM_ACTION == 'init & plan' || params.TERRAFORM_ACTION == 'apply' }
            }
            steps {
                dir("${TF_WORKING_DIR}") {
                    sh 'terraform init'
                    sh 'terraform plan -out=tfplan -var="tag_name=${TF_VAR_tag_name}" -var="instance_count=${params.INSTANCE_COUNT}"'
                }
            }
        }

        stage('Terraform Apply') {
            when {
                expression { params.TERRAFORM_ACTION == 'apply' }
            }
            steps {
                dir("${TF_WORKING_DIR}") {
                    script {
                        if (fileExists("tfplan")) {
                            echo "Applying Terraform plan..."
                        } else {
                            error "Terraform plan file does not exist. Run 'init & plan' first."
                        }
                    }
                    sh 'terraform apply -auto-approve tfplan'
                }
            }
        }

        stage('Terraform Destroy') {
            when {
                expression { params.TERRAFORM_ACTION == 'destroy' }
            }
            steps {
                dir("${TF_WORKING_DIR}") {
                    sh 'terraform destroy -auto-approve -var="tag_name=${TF_VAR_tag_name}" -var="instance_count=${params.INSTANCE_COUNT}"'
                }
            }
        }
    }

    post {
        always {
            echo 'Terraform process completed!'
        }
    }
}
